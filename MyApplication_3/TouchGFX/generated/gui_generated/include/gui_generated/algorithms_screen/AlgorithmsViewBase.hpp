/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef ALGORITHMSVIEWBASE_HPP
#define ALGORITHMSVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/algorithms_screen/AlgorithmsPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/buttons/Buttons.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class AlgorithmsViewBase : public touchgfx::View<AlgorithmsPresenter>
{
public:
    AlgorithmsViewBase();
    virtual ~AlgorithmsViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void submitClicked()
    {
        // Override and implement this function in Algorithms
    }
    virtual void answerSelected1()
    {
        // Override and implement this function in Algorithms
    }
    virtual void answerSelected4()
    {
        // Override and implement this function in Algorithms
    }
    virtual void answerSelected2()
    {
        // Override and implement this function in Algorithms
    }
    virtual void answerSelected3()
    {
        // Override and implement this function in Algorithms
    }
    virtual void nextClicked()
    {
        // Override and implement this function in Algorithms
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::ButtonWithLabel submit;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::IconButtonStyle< touchgfx::BoxWithBorderButtonStyle< touchgfx::ClickButtonTrigger >  >  nextButton;
    touchgfx::TextAreaWithOneWildcard textArea2;
    touchgfx::RadioButtonGroup<4> radioButtonGroup1;
    touchgfx::RadioButton radioButton1;
    touchgfx::RadioButton radioButton4;
    touchgfx::RadioButton radioButton3;
    touchgfx::RadioButton radioButton2;
    touchgfx::TextAreaWithOneWildcard answer1;
    touchgfx::TextAreaWithOneWildcard answer2;
    touchgfx::TextAreaWithOneWildcard answer3;
    touchgfx::TextAreaWithOneWildcard answer4;
    touchgfx::TextAreaWithOneWildcard scoreTextArea;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 300;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];
    static const uint16_t TEXTAREA2_SIZE = 10;
    touchgfx::Unicode::UnicodeChar textArea2Buffer[TEXTAREA2_SIZE];
    static const uint16_t SCORETEXTAREA_SIZE = 2;
    touchgfx::Unicode::UnicodeChar scoreTextAreaBuffer[SCORETEXTAREA_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<AlgorithmsViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<AlgorithmsViewBase, const touchgfx::AbstractButton&> radioButtonSelectedCallback;
    touchgfx::Callback<AlgorithmsViewBase, const touchgfx::AbstractButtonContainer&> flexButtonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src);
    void flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src);

};

#endif // ALGORITHMSVIEWBASE_HPP
